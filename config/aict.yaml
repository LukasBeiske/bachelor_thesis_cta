# seed for the random number generators, to make things reproducible
seed: 0
true_energy_column: mc_energy
energy_unit: TeV

multiple_telescopes: False

n_cross_validations : 5

separator:
  classifier : |
    ensemble.RandomForestClassifier(
        n_estimators=100,
        max_features='sqrt',
        n_jobs=-1,
        max_depth=15,
        criterion='entropy',

    )

  # randomly sample the data if you dont want to use the whole set
  n_background: 50000
  n_signal: 50000

  # Define the name of the output column for the positive class.
  # default is gamma_prediction
  output_name: gammaness

  # Define the name of the column that contains the name of the telescope in case you're working
  # with mulitple telescopes and telescope types
  # telescope_type_key: telescope:name

  features:
    - intensity
    - log_intensity
    - intercept
    - time_gradient
    - length
    - width
    - skewness
    - kurtosis
    - n_islands
    - n_pixels
    - leakage1_intensity
    - leakage1_pixel
    - leakage2_intensity
    - leakage2_pixel
    - concentration_cog
    - concentration_core
    - concentration_pixel

  # Generate some features using pd.DataFrame.eval
  # List all columns that have to be read from the input files
  # in `needed_columns`.
  # features must be a mapping of feature name -> expression
  feature_generation:
    needed_columns:
      - width
      - length
      - intensity
    features:
      area: width * length * @pi
      intensity_area: intensity / (width * length * @pi)
      area_intensity_cut_var: (width * length * @pi) / log(intensity)**2

disp:
  disp_regressor : |
    ensemble.RandomForestRegressor(
        n_estimators=100,
        max_features='sqrt',
        n_jobs=-1,
        max_depth=20,
    )

  sign_classifier: |
    ensemble.RandomForestClassifier(
        n_estimators=100,
        max_features='sqrt',
        n_jobs=-1,
        max_depth=20,
    )

  coordinate_transformation: CTA

  source_az_column: mc_az
  source_az_unit: rad
  source_alt_column: mc_alt 
  source_alt_unit: rad
  pointing_az_column: az_tel
  pointing_az_unit: rad
  pointing_alt_column: alt_tel
  pointing_alt_unit: rad

  cog_x_column: x  
  cog_y_column: y  
  delta_column: psi
  delta_unit: rad
  focal_length_column: focal_length
  focal_length_unit: m
  #array_event_column: array_event_id

  # randomly sample the data if you dont want to use the whole set
  n_signal : 50000

  features:
    - intensity
    - log_intensity
    - width
    - length
    - n_pixels
    - leakage1_intensity
    - leakage1_pixel
    - leakage2_intensity
    - leakage2_pixel
    - r
    - kurtosis
    - skewness
    - concentration_cog
    - concentration_core
    - time_gradient
    - intercept

  feature_generation:
    needed_columns:
      - width
      - length
      - log_intensity
    features:
      elongation: width / length
      area: width * length * @pi
      log_intensity_area: log_intensity / (width * length * @pi)

energy:
  regressor : |
    ensemble.RandomForestRegressor(
      n_estimators=100,
      max_features='sqrt',
      n_jobs=-1,
      max_depth=12,
    )

  # randomly sample the data if you dont want to use the whole set
  n_signal: 50000

  # define the name of the regression target
  target_column: mc_energy
  log_target: true

  # Define the name of the variable you want estimate by regression.
  # The default is 'gamma_energy_energy'.
  output_name: gamma_energy_prediction

  features:
    - intensity
    - log_intensity
    - length
    - width
    - n_islands
    - n_pixels
    - skewness
    - leakage1_intensity
    - leakage1_pixel
    - leakage2_intensity
    - leakage2_pixel
    - concentration_cog
    - concentration_core
    - concentration_pixel

  # Generate some features using pd.DataFrame.eval
  # List all keys that have to be read from the input files
  # in needed keys.
  # features must be a mapping of feature name -> expression
  feature_generation:
    needed_columns:
      - width
      - length
      - intensity
    features:
      area: width * length * @pi
      intensity_area: intensity / (width * length * @pi)
